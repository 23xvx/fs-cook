#!/usr/bin/env bash

export ROOT_DIR

ROOT_DIR="$(git rev-parse --show-toplevel)"

# sudo check
if [ "$(id -u)" != "0" ]; then
    if ! command -v sudo >/dev/null 2>&1; then
        echo "This script requires sudo or root privileges but none present."
        exit 1
    else
        SUDO="$(command -v sudo)"
    fi
fi

die() {
    echo -e "?? Error ${*}"
    if $ENABLE_EXIT; then
        exit 1
    fi
    :
}
warn() {
    echo -e "!! ${*}"
    :
}
shout() {
    echo -e "=> ${*}"
    :
}
msg() {
    echo -e "${*}"
}
# lshout () { echo -e "${*}";:; }

do_mount() {
    local chroot_dir=$1
    points="$chroot_dir/dev $chroot_dir/sys $chroot_dir/proc"
    see_for_directory "$points"

    if ! is_mounted "$chroot_dir/dev" >>/dev/null; then
      shout "mounting: $chroot_dir/dev"
      $SUDO mount --rbind /dev "$chroot_dir"/dev
    fi

    if ! is_mounted "$chroot_dir"/proc >>/dev/null; then
      shout "mounting: $chroot_dir/proc"
      $SUDO mount -t proc /proc $chroot_dir/proc
    fi

    if ! is_mounted "$chroot_dir"/sys >>/dev/null; then
      shout "mounting: $chroot_dir/sys"
      $SUDO mount -t sysfs /sys "$chroot_dir"/sys
    fi
}

is_mounted() {
    local chroot_dir=$1
    if [ -d "$chroot_dir" ]; then
        if mountpoint -q "$chroot_dir"; then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

list_parser() {
    export count
    export include_list
    
    count=0
    include_list=""

    list_file=$1

    if [ -f "$list_file" ]; then
        buffer=$(cat "$list_file")
        for line in $buffer; do
            ((count++))
            include_list+=" $line"
        done
    else
        echo "File $list_file not found.."
    fi
}

depends_on() {
    local packages="$1"
    export x
    for package in ${packages}; do
        if ! command -v "${package}" &>/dev/null; then
            warn "Missing package: ${package}"
            ((x = x + 1))
        fi
    done

    if ((x > 0)); then
        die "Found missing packages: ${packages}"
    fi
}

dpkg_depends_on() {
    local packages="$1"
    export x
    for package in ${packages}; do
        if ! dpkg -s "${package}" &>/dev/null; then
            warn "Missing package: ${package}"
            ((x = x + 1))
        fi
    done

    if ((x > 0)); then
        die "Found missing packages: ${packages}"
    fi
}

see_for_directory() {
    local es=true
    dirs="$1"
    x=0
    for dir in $dirs; do
        if [ ! -d "$dir" ]; then
            warn "Missing directory: $dir"
            ((x = x + 1))
        fi
    done
    if ((x > 0)); then
        die "Missing directories: ${dirs}"
        export es=false
    fi
}

no_to_directory() {
    dir="$1"
    if [ -d "$dir" ]; then
        if ! $NO_DIR_CHECK_OVERRIDE; then
            die "directory exits: $dir"
        fi
    fi
}

foreign_arch() {
    arch=$1
    worker_arch="$(dpkg --print-architecture)"
    export foreign_worker=false
    if [ "$arch" != "$worker_arch" ]; then
        FOREIGN="--foreign"
        foreign_worker=true
    fi
}

includes_packages() {
    # comma sperated values
    includes="bzip2 pv lz4 ${INCLUDE_PACKAGES}"
    # environment variable INCLUDE_PACKAGES
    export includes
    x=0
    for item in $includes; do
        include_final="$include_final,$item"
        ((x = x + 1))
    done
    shout "$x includes processed "
}

do_debootstrap() {
    export target_dir="$1"
    export arch="$2"
    local NO_COMPRESSION

    includes_packages
    foreign_arch "$arch"
    no_to_directory "$target_dir"

    export chroot_dir
    chroot_dir=$target_dir

    if [ -n "$SUITE" ]; then
            supported_suites="$(ls "${ROOT_DIR}"/core/debootstrap/scripts)"
            suite_found=false
            for sts in $supported_suites; do
                if [ "$sts" == "$SUITE" ]; then
                    suite="$SUITE"
                    suite_found=true
                    break
                fi
            done

            if [ "$suite_found" == "false" ]; then
                die "Unsupported suite: $SUITE"
            fi
    else
        suite="hirsute"
    fi

    shout "debootstraping $suite to $target_dir"

    if [[ -n $OVERRIDER_MIRROR ]]; then
      MIRROR="$OVERRIDER_MIRROR"
    else
      case $arch in
        amd64|i386) MIRROR="http://archive.ubuntu.com/ubuntu/" ;;
        *) MIRROR="http://ports.ubuntu.com/ubuntu-ports/" ;;
        esac
    fi

    (
        $SUDO ./core/debootstrap/debootstrap \
            $FOREIGN \
            --arch="$arch" \
            --no-check-gpg \
            --include="${include_final}" \
            "$suite" \
            "$target_dir" \
            $MIRROR
    ) || die "Couldn't debootstrap..."

    if $foreign_worker; then
        do_second_stage "$target_dir" "$arch"
    fi

    if ! $NO_COMPRESSION; then
        do_compress $chroot_dir
    fi
}

arch_translate() {
    arch=$1
    export t_arch

    case $arch in
    arm64 | aarch64)
        t_arch="aarch64"
        ;;
    armhf | arm)
        t_arch="arm"
        ;;
    armel)
        t_arch="armel"
        ;;
    amd64 | x86_64)
        t_arch="amd64"
        ;;
    i686 | i386)
        t_arch="i386"
        ;;
    *) die "arch translator error" ;;
    esac
}

do_second_stage() {
    chroot_dir=$1
    local arch=$2
    do_qemu_user_emulation
    do_chroot_ae "$chroot_dir" /bin/bash /debootstrap/debootstrap --second-stage
}

do_qemu_user_emulation() {
    arch_translate "$arch"
    if $foreign_worker; then
#         dpkg_depends_on "qemu-user-static"
        $SUDO cp core/qemu-static/qemu-"$t_arch"-static "$chroot_dir/usr/bin/"
    fi
}

do_chroot_ae() {
    local chroot_dir="$1"
    shift
    local command=$*
    do_mount "$chroot_dir"
    if [ -d "$chroot_dir" ]; then
        (
            $SUDO chroot "$chroot_dir" $command
        ) || warn "Couldn't chroot or exited with non zero..."
    else
        die "chroot directory doesn't exist: $chroot_dir"
    fi
}

do_compress() {
    #compression
    export TARGET_FILE
    export chroot_dir=$1
    TARGET_FILE="$(basename ${chroot_dir})"
    if [ -n "$OVERRIDER_COMPRESSION_TYPE" ]; then
        case $1 in
        bzip2) do_tar_bzip ;;
        gzip) do_tar_gzip ;;
        lz) do_tar_lz4 ;;
        *)
            shout "Unknown compression type"
            shout "all compression: lz,gzip,bzip2"
            die "Giving up!!"
            ;;
        esac
    else
        shout "Defaulting to bzip..."
        do_tar_bzip
    fi

}

do_tar_lz4() {
    shout "starting compression..."
    $SUDO cp "plugins/lz-packer.sh" "${chroot_dir}"

    do_chroot_ae            \
     "$chroot_dir"          \
     "chmod +x /lz-packer.sh"

    do_chroot_ae            \
        "$chroot_dir"       \
        "/gz-packer.sh ${TARGET_FILE}"
    $SUDO cp "${chroot_dir}/${TARGET_FILE}.lz" out
}

do_tar_gzip() {
    shout "starting compression..."
    $SUDO cp "plugins/gz-packer.sh" "${chroot_dir}"

    do_chroot_ae \
    "$chroot_dir" \
    "chmod +x /gz-packer.sh"

    do_chroot_ae \
        "$chroot_dir" \
        "/gz-packer.sh ${TARGET_FILE}"
    $SUDO cp "${chroot_dir}/${TARGET_FILE}.tar.gz" out
}

do_tar_bzip() {
    shout "starting compression..."
    $SUDO cp "plugins/j-packer.sh" "${chroot_dir}"
    do_chroot_ae \
        "$chroot_dir" \
        "chmod +x /j-packer.sh"
    do_chroot_ae \
        "$chroot_dir" \
        "/bin/bash /j-packer.sh ${TARGET_FILE}"
    $SUDO cp "${chroot_dir}/${TARGET_FILE}.tar.xz" out
}

run_cmd() {
    local chroot_dir="$1"
    local command="$2"
    do_chroot_ae "$chroot_dir" "$command"
}
